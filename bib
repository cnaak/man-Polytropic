#!/bin/bash

THEBIB=./bibfile.bib
BKPBIB=./bibfile.bkp

function help() {
    cat << ____EOF
NAME
    bib - perform atomic bib operations

SYNOPSIS
    bib COMMAND [args]
        where COMMAND is one of:
            help (no args)
                Print this and exits.
            LIST (no args)
                Lists keys on the default bibfile: ./bibfile.bib.
            LST (no args)
                Machine-readable list of keys.
            BASE (no args)
                lists the accessible bibliography database, one file per line.
            ADD <bibpats>
                Backs  up  ./bibfile.bib  into  ./bibfile.bkp,  then  adds   all
                bibliographic entries  from  files  matching  each  one  of  the
                <bibpats>  (no  wildcards),  if   existing,   to   the   default
                ./bibfile.bib.
            REM <bibpats>
                Backs up ./bibfile.bib into  ./bibfile.bkp,  then  rebuilds  the
                default ./bibfile.bib from scratch from previous list  of  keys,
                avoiding each one of the <bibpats> patterns (no  wildcards).
            RESET
                Backs up  ./bibfile.bib  into  ./bibfile.bkp,  then  resets  the
                ./bibfile.bib into an empty file.

AUTHOR
    Naaktgeboren, C.
____EOF
    exit ${1:--1};
}

# Argument check
if test "a${1}" == "a"; then
    echo -e "ERROR: not enough arguments.\n"
    help -1;
fi

# Functionality

function uline() {
    MSG="$(echo -e ${1})"
    echo "${MSG}"
    echo "${MSG}" | sed 's|.|-|g'
}

function hasBib() { test -f "${THEBIB}"; }
function hasBkp() { test -f "${BKPBIB}"; }
function hasBoth() { hasBib && hasBkp; }

function letItBib() {
    if hasBib; then
        echo -e "INFO: Existing '${THEBIB}'";
    elif hasBkp; then
        echo -e "INFO: Restored missing '${THEBIB}' from '${BKPBIB}'"
        cp "${BKPBIB}" "${THEBIB}";
    else
        echo -e "INFO: Created empty '${THEBIB}'"
        touch "${THEBIB}";
    fi;
}

function listBib() {
    if hasBib; then
        uline "Key list for file '${THEBIB}':"
        grep '^@' "${THEBIB}" |\
            grep -v '^@Comment' |\
            sort -n |\
            sed 's|^|\t|g';
    else
        exit -1;
    fi;
}

function lstBib() {
    if hasBib; then
        grep '^@' "${THEBIB}" |\
            grep -v '^@Comment' |\
            sed 's|^.*{||g' |\
            sed 's|, *$||g' |\
            sort -n;
    else
        exit -1;
    fi;
}

function dbase() {
    find -L . -name '*\.bib' | grep -v "${THEBIB}" | sort -n
}

function dbfiles() {
    for i in $(dbase); do basename "${i}"; done
}

function keysOf() {
    FULPTH="$(find -L . -name ${1}.bib)"
    grep '^@' "${FULPTH}" |\
        grep -v '^@Comment' |\
        sed 's|^.*{||g' |\
        sed 's|, *$||g' |\
        sort -n;
}

function addBib() {
    if [ "$#" -lt 1 ]; then
        echo -e "ERROR: Missing arguments to ADD.\n"
        help -1;
    fi
    for BIBPAT in "$@"; do
        for BIBSRC in $(dbfiles | sed "s|\.bib$||g" | grep "${BIBPAT}"); do
            if grep -q "$(keysOf ${BIBSRC})" "${THEBIB}"; then
                for BIBKEY in $(keysOf ${BIBSRC}); do
                    echo -e "INFO: x '${BIBKEY}' (from ${BIBSRC})."
                done;
            else
                for BIBKEY in $(keysOf ${BIBSRC}); do
                    echo -e "INFO: + '${BIBKEY}' (from ${BIBSRC})."
                done;
                cat $(find -L . -name "${BIBSRC}.bib") >> "${THEBIB}"
                echo "" >> "${THEBIB}";
            fi
        done
    done
}

function remBib() {
    CURKEY="$(./bib LST)"
    REMKEY="$(echo $@ | sed 's| |\n|g')"
    DIFKEY="$(echo "${CURKEY}" | grep -v "${REMKEY}")"
    echo -e "INFO: x ALL KEYS."
    cp /dev/null "${THEBIB}"
    addBib "${DIFKEY}"
}

# MAIN - Parse commands
COMM="${1}"
shift
case "${COMM}" in
    "help" | "HELP")
        help 0;;
    "LIST")
        listBib;;
    "LST")
        lstBib;;
    "BASE")
        dbase;;
    "ADD")
        cp "${THEBIB}" "${BKPBIB}"
        addBib "$@";;
    "REM")
        cp "${THEBIB}" "${BKPBIB}"
        remBib "$@";;
    "RESET")
        cp "${THEBIB}" "${BKPBIB}"
        cp /dev/null "${THEBIB}";;
    *)
        echo -e "ERROR: invalid command: '${1}'.\n"
        help -1;;
esac

